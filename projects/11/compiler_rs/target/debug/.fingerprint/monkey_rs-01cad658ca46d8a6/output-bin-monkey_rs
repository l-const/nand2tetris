{"message":"pattern binding `STATIC` is named the same as one of the variants of the type `IdKind`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bindings_with_variant_name)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"IdKind::STATIC","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `STATIC` is named the same as one of the variants of the type `IdKind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:27:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            STATIC => STATIC,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `IdKind::STATIC`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bindings_with_variant_name)]` on by default\u001b[0m\n\n"}
{"message":"pattern binding `FIELD` is named the same as one of the variants of the type `IdKind`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":521,"byte_end":526,"line_start":28,"line_end":28,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            FIELD => FIELD,","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":521,"byte_end":526,"line_start":28,"line_end":28,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            FIELD => FIELD,","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"IdKind::FIELD","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `FIELD` is named the same as one of the variants of the type `IdKind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:28:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            FIELD => FIELD,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `IdKind::FIELD`\u001b[0m\n\n"}
{"message":"pattern binding `ARG` is named the same as one of the variants of the type `IdKind`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":549,"byte_end":552,"line_start":29,"line_end":29,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            ARG => ARG,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":549,"byte_end":552,"line_start":29,"line_end":29,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            ARG => ARG,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"IdKind::ARG","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `ARG` is named the same as one of the variants of the type `IdKind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:29:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ARG => ARG,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `IdKind::ARG`\u001b[0m\n\n"}
{"message":"pattern binding `VAR` is named the same as one of the variants of the type `IdKind`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":573,"byte_end":576,"line_start":30,"line_end":30,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            VAR => VAR,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":573,"byte_end":576,"line_start":30,"line_end":30,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            VAR => VAR,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"IdKind::VAR","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `VAR` is named the same as one of the variants of the type `IdKind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:30:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            VAR => VAR,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `IdKind::VAR`\u001b[0m\n\n"}
{"message":"pattern binding `NONE` is named the same as one of the variants of the type `IdKind`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":597,"byte_end":601,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            NONE => NONE,","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":597,"byte_end":601,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            NONE => NONE,","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"IdKind::NONE","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `NONE` is named the same as one of the variants of the type `IdKind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:31:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            NONE => NONE,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `IdKind::NONE`\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":521,"byte_end":526,"line_start":28,"line_end":28,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            FIELD => FIELD,","highlight_start":13,"highlight_end":18}],"label":"unreachable pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":false,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":"matches any value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:28:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            STATIC => STATIC,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches any value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            FIELD => FIELD,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":549,"byte_end":552,"line_start":29,"line_end":29,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            ARG => ARG,","highlight_start":13,"highlight_end":16}],"label":"unreachable pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":false,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":"matches any value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:29:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            STATIC => STATIC,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches any value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            FIELD => FIELD,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ARG => ARG,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable pattern\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":573,"byte_end":576,"line_start":30,"line_end":30,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            VAR => VAR,","highlight_start":13,"highlight_end":16}],"label":"unreachable pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":false,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":"matches any value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:30:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            STATIC => STATIC,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches any value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            VAR => VAR,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable pattern\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":597,"byte_end":601,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            NONE => NONE,","highlight_start":13,"highlight_end":17}],"label":"unreachable pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":false,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":"matches any value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:31:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            STATIC => STATIC,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches any value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            NONE => NONE,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable pattern\u001b[0m\n\n"}
{"message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":1381,"byte_end":1385,"line_start":62,"line_end":62,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"    fn define(&mut self, name: &str, typ: &str) {","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":1381,"byte_end":1385,"line_start":62,"line_end":62,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"    fn define(&mut self, name: &str, typ: &str) {","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:62:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn define(&mut self, name: &str, typ: &str) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `typ`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":1393,"byte_end":1396,"line_start":62,"line_end":62,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"    fn define(&mut self, name: &str, typ: &str) {","highlight_start":38,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":1393,"byte_end":1396,"line_start":62,"line_end":62,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"    fn define(&mut self, name: &str, typ: &str) {","highlight_start":38,"highlight_end":41}],"label":null,"suggested_replacement":"_typ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `typ`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:62:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn define(&mut self, name: &str, typ: &str) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_typ`\u001b[0m\n\n"}
{"message":"unused variable: `seg`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":418,"byte_end":421,"line_start":33,"line_end":33,"column_start":37,"column_end":40,"is_primary":true,"text":[{"text":"    pub(crate) fn write_push(&self, seg: Segment) {}","highlight_start":37,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":418,"byte_end":421,"line_start":33,"line_end":33,"column_start":37,"column_end":40,"is_primary":true,"text":[{"text":"    pub(crate) fn write_push(&self, seg: Segment) {}","highlight_start":37,"highlight_end":40}],"label":null,"suggested_replacement":"_seg","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `seg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:33:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_push(&self, seg: Segment) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_seg`\u001b[0m\n\n"}
{"message":"unused variable: `seg`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":471,"byte_end":474,"line_start":35,"line_end":35,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"    pub(crate) fn write_pop(&self, seg: Segment) {}","highlight_start":36,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":471,"byte_end":474,"line_start":35,"line_end":35,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"    pub(crate) fn write_pop(&self, seg: Segment) {}","highlight_start":36,"highlight_end":39}],"label":null,"suggested_replacement":"_seg","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `seg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:35:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_pop(&self, seg: Segment) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_seg`\u001b[0m\n\n"}
{"message":"unused variable: `cmd`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":527,"byte_end":530,"line_start":37,"line_end":37,"column_start":39,"column_end":42,"is_primary":true,"text":[{"text":"    pub(crate) fn write_arithm(&self, cmd: Command) {}","highlight_start":39,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":527,"byte_end":530,"line_start":37,"line_end":37,"column_start":39,"column_end":42,"is_primary":true,"text":[{"text":"    pub(crate) fn write_arithm(&self, cmd: Command) {}","highlight_start":39,"highlight_end":42}],"label":null,"suggested_replacement":"_cmd","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `cmd`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:37:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_arithm(&self, cmd: Command) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_cmd`\u001b[0m\n\n"}
{"message":"unused variable: `label`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":582,"byte_end":587,"line_start":39,"line_end":39,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"    pub(crate) fn write_label(&self, label: &str) {}","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":582,"byte_end":587,"line_start":39,"line_end":39,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"    pub(crate) fn write_label(&self, label: &str) {}","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":"_label","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `label`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:39:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_label(&self, label: &str) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_label`\u001b[0m\n\n"}
{"message":"unused variable: `label`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":635,"byte_end":640,"line_start":41,"line_end":41,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    pub(crate) fn write_goto(&self, label: &str) {}","highlight_start":37,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":635,"byte_end":640,"line_start":41,"line_end":41,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    pub(crate) fn write_goto(&self, label: &str) {}","highlight_start":37,"highlight_end":42}],"label":null,"suggested_replacement":"_label","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `label`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:41:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_goto(&self, label: &str) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_label`\u001b[0m\n\n"}
{"message":"unused variable: `label`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":686,"byte_end":691,"line_start":43,"line_end":43,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"    pub(crate) fn write_if(&self, label: &str) {}","highlight_start":35,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":686,"byte_end":691,"line_start":43,"line_end":43,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"    pub(crate) fn write_if(&self, label: &str) {}","highlight_start":35,"highlight_end":40}],"label":null,"suggested_replacement":"_label","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `label`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:43:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_if(&self, label: &str) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_label`\u001b[0m\n\n"}
{"message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":739,"byte_end":743,"line_start":45,"line_end":45,"column_start":37,"column_end":41,"is_primary":true,"text":[{"text":"    pub(crate) fn write_call(&self, name: &str, n_args: u8) {}","highlight_start":37,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":739,"byte_end":743,"line_start":45,"line_end":45,"column_start":37,"column_end":41,"is_primary":true,"text":[{"text":"    pub(crate) fn write_call(&self, name: &str, n_args: u8) {}","highlight_start":37,"highlight_end":41}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:45:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_call(&self, name: &str, n_args: u8) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\n"}
{"message":"unused variable: `n_args`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":751,"byte_end":757,"line_start":45,"line_end":45,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"    pub(crate) fn write_call(&self, name: &str, n_args: u8) {}","highlight_start":49,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":751,"byte_end":757,"line_start":45,"line_end":45,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"    pub(crate) fn write_call(&self, name: &str, n_args: u8) {}","highlight_start":49,"highlight_end":55}],"label":null,"suggested_replacement":"_n_args","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `n_args`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:45:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_call(&self, name: &str, n_args: u8) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_n_args`\u001b[0m\n\n"}
{"message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":807,"byte_end":811,"line_start":47,"line_end":47,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"    pub(crate) fn write_function(&self, name: &str, n_args: u8) {}","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":807,"byte_end":811,"line_start":47,"line_end":47,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"    pub(crate) fn write_function(&self, name: &str, n_args: u8) {}","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:47:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_function(&self, name: &str, n_args: u8) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\n"}
{"message":"unused variable: `n_args`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vm_writer.rs","byte_start":819,"byte_end":825,"line_start":47,"line_end":47,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"    pub(crate) fn write_function(&self, name: &str, n_args: u8) {}","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vm_writer.rs","byte_start":819,"byte_end":825,"line_start":47,"line_end":47,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"    pub(crate) fn write_function(&self, name: &str, n_args: u8) {}","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":"_n_args","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `n_args`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm_writer.rs:47:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) fn write_function(&self, name: &str, n_args: u8) {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_n_args`\u001b[0m\n\n"}
{"message":"variable `STATIC` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":491,"byte_end":497,"line_start":27,"line_end":27,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            STATIC => STATIC,","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"static","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `STATIC` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:27:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            STATIC => STATIC,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `static`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"variable `FIELD` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":521,"byte_end":526,"line_start":28,"line_end":28,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            FIELD => FIELD,","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":521,"byte_end":526,"line_start":28,"line_end":28,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            FIELD => FIELD,","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"field","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `FIELD` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:28:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            FIELD => FIELD,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `field`\u001b[0m\n\n"}
{"message":"variable `ARG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":549,"byte_end":552,"line_start":29,"line_end":29,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            ARG => ARG,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":549,"byte_end":552,"line_start":29,"line_end":29,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            ARG => ARG,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"arg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `ARG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:29:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ARG => ARG,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arg`\u001b[0m\n\n"}
{"message":"variable `VAR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":573,"byte_end":576,"line_start":30,"line_end":30,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            VAR => VAR,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":573,"byte_end":576,"line_start":30,"line_end":30,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            VAR => VAR,","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"var","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `VAR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:30:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            VAR => VAR,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `var`\u001b[0m\n\n"}
{"message":"variable `NONE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/symbol.rs","byte_start":597,"byte_end":601,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            NONE => NONE,","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/symbol.rs","byte_start":597,"byte_end":601,"line_start":31,"line_end":31,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            NONE => NONE,","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"none","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `NONE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/symbol.rs:31:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            NONE => NONE,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `none`\u001b[0m\n\n"}
{"message":"structure field `Type` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/token.rs","byte_start":3025,"byte_end":3029,"line_start":84,"line_end":84,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    pub(crate) Type: String,","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/token.rs","byte_start":3025,"byte_end":3029,"line_start":84,"line_end":84,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"    pub(crate) Type: String,","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"type","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Type` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/token.rs:84:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) Type: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `type`\u001b[0m\n\n"}
{"message":"structure field `Literal` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/token.rs","byte_start":3054,"byte_end":3061,"line_start":85,"line_end":85,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    pub(crate) Literal: String,","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/token.rs","byte_start":3054,"byte_end":3061,"line_start":85,"line_end":85,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    pub(crate) Literal: String,","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":"literal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Literal` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/token.rs:85:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub(crate) Literal: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `literal`\u001b[0m\n\n"}
{"message":"28 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 28 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0170`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0170`.\u001b[0m\n"}
